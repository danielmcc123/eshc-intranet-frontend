/**
 * ESHC Api's
 * ESHC APIs exposed from a Java EE back-end to an Angular front-end
 *
 * OpenAPI spec version: V1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ActionPoint } from '../model/actionPoint';
import { PageActionPoint } from '../model/pageActionPoint';
import { Task } from '../model/task';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ActionPointEndpointService {

    protected basePath = 'http://localhost:8090';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a task
     * 
     * @param id id
     * @param task task
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTaskUsingPUT(id: number, task: Task, observe?: 'body', reportProgress?: boolean): Observable<ActionPoint>;
    public addTaskUsingPUT(id: number, task: Task, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ActionPoint>>;
    public addTaskUsingPUT(id: number, task: Task, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ActionPoint>>;
    public addTaskUsingPUT(id: number, task: Task, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addTaskUsingPUT.');
        }
        if (task === null || task === undefined) {
            throw new Error('Required parameter task was null or undefined when calling addTaskUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<ActionPoint>(`${this.basePath}/api/actionpoints/addtaskto/${encodeURIComponent(String(id))}`,
            task,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Count all members
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countAllActionPointsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<number>;
    public countAllActionPointsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public countAllActionPointsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public countAllActionPointsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<number>(this.basePath + '/api/actionpoints/count',
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an action point
     * 
     * @param actionPoint actionPoint
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createActionPointUsingPOST(actionPoint: ActionPoint, observe?: 'body', reportProgress?: boolean): Observable<ActionPoint>;
    public createActionPointUsingPOST(actionPoint: ActionPoint, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ActionPoint>>;
    public createActionPointUsingPOST(actionPoint: ActionPoint, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ActionPoint>>;
    public createActionPointUsingPOST(actionPoint: ActionPoint, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (actionPoint === null || actionPoint === undefined) {
            throw new Error('Required parameter actionPoint was null or undefined when calling createActionPointUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ActionPoint>(this.basePath +'/api/actionpoints',
            actionPoint,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an action point
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteActionPointUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteActionPointUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteActionPointUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteActionPointUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteActionPointUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(this.basePath + '/api/actionpoints/' + encodeURIComponent(String(id)),
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return an action point given an Id
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActionPointUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<ActionPoint>;
    public getActionPointUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ActionPoint>>;
    public getActionPointUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ActionPoint>>;
    public getActionPointUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getActionPointUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ActionPoint>(this.basePath + '/api/actionpoints/' + parseInt(encodeURIComponent(String(id))),
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetch Actionpoints from list of ids
     * Pagination available at end of url:&#x60; ?page&#x3D;1&amp;size&#x3D;10
     * @param ids ids
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActionPointsFromListUsingGET(ids: string, observe?: 'body', reportProgress?: boolean): Observable<PageActionPoint>;
    public getActionPointsFromListUsingGET(ids: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageActionPoint>>;
    public getActionPointsFromListUsingGET(ids: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageActionPoint>>;
    public getActionPointsFromListUsingGET(ids: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling getActionPointsFromListUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<PageActionPoint>(`${this.basePath}/api/actionpoints/fromlist/${encodeURIComponent(String(ids))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all Action Points for a working group
     * 
     * @param id id
     * @param page Page no
     * @param size Size of each page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActionPointsUsingGET1(id: number, page?: string, size?: string, observe?: 'body', reportProgress?: boolean): Observable<PageActionPoint>;
    public getActionPointsUsingGET1(id: number, page?: string, size?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageActionPoint>>;
    public getActionPointsUsingGET1(id: number, page?: string, size?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageActionPoint>>;
    public getActionPointsUsingGET1(id: number, page?: string, size?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getActionPointsUsingGET1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<PageActionPoint>(this.basePath + '/api/working/' + encodeURIComponent(String(id)) + '/actions',
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetch all Actionpoints
     * Pagination available at end of url:&#x60; ?page&#x3D;1&amp;size&#x3D;10
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActionPointsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<PageActionPoint>;
    public getActionPointsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageActionPoint>>;
    public getActionPointsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageActionPoint>>;
    public getActionPointsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<PageActionPoint>(this.basePath + '/api/actionpoints' ,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an action point
     * 
     * @param id id
     * @param actionPoint actionPoint
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateActionPointUsingPUT(id: number, actionPoint: ActionPoint, observe?: 'body', reportProgress?: boolean): Observable<ActionPoint>;
    public updateActionPointUsingPUT(id: number, actionPoint: ActionPoint, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ActionPoint>>;
    public updateActionPointUsingPUT(id: number, actionPoint: ActionPoint, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ActionPoint>>;
    public updateActionPointUsingPUT(id: number, actionPoint: ActionPoint, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateActionPointUsingPUT.');
        }
        if (actionPoint === null || actionPoint === undefined) {
            throw new Error('Required parameter actionPoint was null or undefined when calling updateActionPointUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<ActionPoint>(this.basePath + '/api/actionpoints/' + encodeURIComponent(String(id)),
            actionPoint,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
